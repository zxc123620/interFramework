{
  "uid" : "67b601218c5572e9",
  "name" : "成功调用登陆接口，msg返回登录成功",
  "fullName" : "utils.test_case_utils.test_single#test_single",
  "historyId" : "72d1210fa329909b554271fb863713ff",
  "time" : {
    "start" : 1684058469266,
    "stop" : 1684058469418,
    "duration" : 152
  },
  "description" : "正常用例登陆",
  "descriptionHtml" : "<p>正常用例登陆</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 预期结果与实际结果不一致\nassert False",
  "statusTrace" : "data = {'JSON提取_引用名称': 'VAR_TOKEN;VAR_UID', 'JSON表达式': '$..token;$..id', 'feature(大模块)': 'F01_华测电商', 'id': 'login.ok', ...}\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_single(data):\n        # # 动态生成标题\n        # allure.dynamic.title(data[11])\n        # 如果存在自定义标题\n        logger.info(\"======================================================\")\n        logger.info(\"用例标题: %s\" % data['用例名'])\n        logger.info(\"数据: %s\" % data)\n        global result\n        if data['用例名'] is not None:\n            # 动态生成标题\n            allure.dynamic.title(data['用例名'])\n        if data['story(小模块)'] is not None:\n            # 动态获取story模块名\n            allure.dynamic.story(data['story(小模块)'])\n        if data['feature(大模块)'] is not None:\n            # 动态获取feature模块名\n            allure.dynamic.feature(data['feature(大模块)'])\n        if data['备注'] is not None:\n            # 动态获取备注信息\n            allure.dynamic.description(data['备注'])\n        if data['级别'] is not None:\n            # 动态获取级别信息(blocker、critical、normal、minor、trivial)\n            allure.dynamic.severity('级别')\n        # 行数\n        r = str(data[\"编号\"] + 1)\n        # 解析文件\n        file_str = data[\"文件\"]\n        if file_str is None:\n            files = None\n        else:\n            file_list = []\n            file_dict = eval(file_str)\n            for key, value in file_dict.items():\n                value = ROOT_PATH + \"/upload_files/\" + value\n                file_list.append((key, (key, open(value, \"rb\"))))  # ('1.png', ('1.png', open('logo.png', 'rb')))\n            files = tuple(file_list)\n        # ==============Excel数据解析==============\n        try:\n            url = data[\"地址\"] + data[\"路径\"] if data[\"路径\"] is not None else data[\"地址\"]\n            dict_data = {\n                'url': url,\n                'params': eval(data['公共参数(PARAMS)']),\n                'headers': eval(data['请求头']),\n                data[\"参数类型\"]: eval(data['参数']),  # json/data\n                \"files\": files\n            }\n        except Exception:\n            logger.error(\"接口请求格式有误，请检查url、params、headers、data、参数类型、文件\")\n            sheet[\"N\" + r] = \"请求参数有误，请检查\"\n            raise\n        res = getattr(ak, data['请求方法'])(**dict_data)\n        # =================Json提取器=================\n        if data['JSON提取_引用名称'] is not None:\n            # 遍历分割JSON提取_引用名称\n            json_name_str = data['JSON提取_引用名称']\n            # 用分号分割varStr字符串，并保存到列表\n            json_name_str_list = json_name_str.split(';')\n            logger.info(\"JSON提取_引用名称: %s\" % json_name_str_list)\n            # 获取列表长度\n            length = len(json_name_str_list)\n            # 遍历分割JSON表达式\n            jsonpath_str = data['JSON表达式']\n            jsonpath_str_list = jsonpath_str.split(';')\n            logger.info(\"JSON表达式: %s\" % jsonpath_str_list)\n            # 循环输出列表值\n            for i in range(length):\n                # 获取JSON提取_引用名称\n                key = json_name_str_list[i]\n                # json表达式获取\n                json_exp = jsonpath_str_list[i]\n                # 字典值获取\n                value_json = ak.get_text(res.text, json_exp)\n                # 持续添加参数，只要参数名不重复，重复的后面就会覆盖前面的参数\n                all_val[key] = value_json\n        # =================校验类型校验=================\n        # 校验类型校验\n        assert_types = [i.value for i in AssertType]\n        excel_assert_types = str(data[\"校验类型\"]).split(\";\")  # 校验类型(多个)\n        excel_json_assert_columns = data['校验字段'].split(\";\")  # 校验字段(多个)\n        excel_expected_values = data['预期结果'].split(\";\")  # 预期结果(多个)\n        if not (len(excel_assert_types) == len(excel_json_assert_columns) == len(excel_expected_values)):  # 查看数量是否一致\n            info = \"校验类型、字段、预期结果数量不匹配: %s %s %s\" % (len(excel_assert_types), len(excel_json_assert_columns), len(\n                excel_expected_values))\n            logger.error(info)\n            raise AssertNumNotMatchException(info)\n        # =================预期结果进行转换操作=================\n        # 预期结果进行转换操作\n        temp_list = []\n        for i in excel_expected_values:\n            if i.startswith(\"{\") or i.startswith(\"[\"):\n                temp_list.append(eval(i))\n            else:\n                temp_list.append(i)\n        excel_expected_values = temp_list\n    \n        # 数量相等的情况\n        # =================校验操作=================\n        for i in range(len(excel_assert_types)):  # 校验参数类型\n            excel_assert_type = excel_assert_types[i]  # 校验类型(单个)\n            excel_json_assert_column = excel_json_assert_columns[i]  # json校验字段(单个)\n            excel_expected_value = excel_expected_values[i]  # 预期结果(单个)\n            if excel_assert_type not in assert_types:  # 校验类型判断\n                error_info = \"校验类型[ %s ]不正确,可用校验参数: %s \" % (excel_assert_type, assert_types)\n                logger.error(error_info)\n                raise AssertTypeException(error_info)\n            # 参数类型校验成功\n            excel_assert_name = AssertType(excel_assert_type).name\n            # 结果校验\n            logger.info(\"=====进行校验 %s\" % i)\n            result = ak.get_text(res.text, excel_json_assert_column, multiple=isinstance(excel_expected_value, (list, dict)))\n            logger.info(\"预期结果: %s\" % excel_expected_value)\n            logger.info(\"实际结果(false表示没找到): %s\" % result)\n            is_ok, msg = getattr(AssertMethod, excel_assert_name)(excel_expected_value, result)\n            sheet[\"N\" + r] = msg\n>           assert is_ok, msg\nE           AssertionError: 预期结果与实际结果不一致\nE           assert False\n\nutils\\test_case_utils\\test_single.py:138: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1684058469123,
      "stop" : 1684058469264,
      "duration" : 141
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "正常用例登陆",
    "status" : "failed",
    "statusMessage" : "AssertionError: 预期结果与实际结果不一致\nassert False",
    "statusTrace" : "data = {'JSON提取_引用名称': 'VAR_TOKEN;VAR_UID', 'JSON表达式': '$..token;$..id', 'feature(大模块)': 'F01_华测电商', 'id': 'login.ok', ...}\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_single(data):\n        # # 动态生成标题\n        # allure.dynamic.title(data[11])\n        # 如果存在自定义标题\n        logger.info(\"======================================================\")\n        logger.info(\"用例标题: %s\" % data['用例名'])\n        logger.info(\"数据: %s\" % data)\n        global result\n        if data['用例名'] is not None:\n            # 动态生成标题\n            allure.dynamic.title(data['用例名'])\n        if data['story(小模块)'] is not None:\n            # 动态获取story模块名\n            allure.dynamic.story(data['story(小模块)'])\n        if data['feature(大模块)'] is not None:\n            # 动态获取feature模块名\n            allure.dynamic.feature(data['feature(大模块)'])\n        if data['备注'] is not None:\n            # 动态获取备注信息\n            allure.dynamic.description(data['备注'])\n        if data['级别'] is not None:\n            # 动态获取级别信息(blocker、critical、normal、minor、trivial)\n            allure.dynamic.severity('级别')\n        # 行数\n        r = str(data[\"编号\"] + 1)\n        # 解析文件\n        file_str = data[\"文件\"]\n        if file_str is None:\n            files = None\n        else:\n            file_list = []\n            file_dict = eval(file_str)\n            for key, value in file_dict.items():\n                value = ROOT_PATH + \"/upload_files/\" + value\n                file_list.append((key, (key, open(value, \"rb\"))))  # ('1.png', ('1.png', open('logo.png', 'rb')))\n            files = tuple(file_list)\n        # ==============Excel数据解析==============\n        try:\n            url = data[\"地址\"] + data[\"路径\"] if data[\"路径\"] is not None else data[\"地址\"]\n            dict_data = {\n                'url': url,\n                'params': eval(data['公共参数(PARAMS)']),\n                'headers': eval(data['请求头']),\n                data[\"参数类型\"]: eval(data['参数']),  # json/data\n                \"files\": files\n            }\n        except Exception:\n            logger.error(\"接口请求格式有误，请检查url、params、headers、data、参数类型、文件\")\n            sheet[\"N\" + r] = \"请求参数有误，请检查\"\n            raise\n        res = getattr(ak, data['请求方法'])(**dict_data)\n        # =================Json提取器=================\n        if data['JSON提取_引用名称'] is not None:\n            # 遍历分割JSON提取_引用名称\n            json_name_str = data['JSON提取_引用名称']\n            # 用分号分割varStr字符串，并保存到列表\n            json_name_str_list = json_name_str.split(';')\n            logger.info(\"JSON提取_引用名称: %s\" % json_name_str_list)\n            # 获取列表长度\n            length = len(json_name_str_list)\n            # 遍历分割JSON表达式\n            jsonpath_str = data['JSON表达式']\n            jsonpath_str_list = jsonpath_str.split(';')\n            logger.info(\"JSON表达式: %s\" % jsonpath_str_list)\n            # 循环输出列表值\n            for i in range(length):\n                # 获取JSON提取_引用名称\n                key = json_name_str_list[i]\n                # json表达式获取\n                json_exp = jsonpath_str_list[i]\n                # 字典值获取\n                value_json = ak.get_text(res.text, json_exp)\n                # 持续添加参数，只要参数名不重复，重复的后面就会覆盖前面的参数\n                all_val[key] = value_json\n        # =================校验类型校验=================\n        # 校验类型校验\n        assert_types = [i.value for i in AssertType]\n        excel_assert_types = str(data[\"校验类型\"]).split(\";\")  # 校验类型(多个)\n        excel_json_assert_columns = data['校验字段'].split(\";\")  # 校验字段(多个)\n        excel_expected_values = data['预期结果'].split(\";\")  # 预期结果(多个)\n        if not (len(excel_assert_types) == len(excel_json_assert_columns) == len(excel_expected_values)):  # 查看数量是否一致\n            info = \"校验类型、字段、预期结果数量不匹配: %s %s %s\" % (len(excel_assert_types), len(excel_json_assert_columns), len(\n                excel_expected_values))\n            logger.error(info)\n            raise AssertNumNotMatchException(info)\n        # =================预期结果进行转换操作=================\n        # 预期结果进行转换操作\n        temp_list = []\n        for i in excel_expected_values:\n            if i.startswith(\"{\") or i.startswith(\"[\"):\n                temp_list.append(eval(i))\n            else:\n                temp_list.append(i)\n        excel_expected_values = temp_list\n    \n        # 数量相等的情况\n        # =================校验操作=================\n        for i in range(len(excel_assert_types)):  # 校验参数类型\n            excel_assert_type = excel_assert_types[i]  # 校验类型(单个)\n            excel_json_assert_column = excel_json_assert_columns[i]  # json校验字段(单个)\n            excel_expected_value = excel_expected_values[i]  # 预期结果(单个)\n            if excel_assert_type not in assert_types:  # 校验类型判断\n                error_info = \"校验类型[ %s ]不正确,可用校验参数: %s \" % (excel_assert_type, assert_types)\n                logger.error(error_info)\n                raise AssertTypeException(error_info)\n            # 参数类型校验成功\n            excel_assert_name = AssertType(excel_assert_type).name\n            # 结果校验\n            logger.info(\"=====进行校验 %s\" % i)\n            result = ak.get_text(res.text, excel_json_assert_column, multiple=isinstance(excel_expected_value, (list, dict)))\n            logger.info(\"预期结果: %s\" % excel_expected_value)\n            logger.info(\"实际结果(false表示没找到): %s\" % result)\n            is_ok, msg = getattr(AssertMethod, excel_assert_name)(excel_expected_value, result)\n            sheet[\"N\" + r] = msg\n>           assert is_ok, msg\nE           AssertionError: 预期结果与实际结果不一致\nE           assert False\n\nutils\\test_case_utils\\test_single.py:138: AssertionError",
    "steps" : [ {
      "name" : "发送post请求",
      "time" : {
        "start" : 1684058469267,
        "stop" : 1684058469416,
        "duration" : 149
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "url",
        "value" : "'http://shop-xo.hctestedu.com/index.php?s=api/user/login'"
      }, {
        "name" : "params",
        "value" : "{'application': 'app', 'application_client_type': 'weixin'}"
      }, {
        "name" : "headers",
        "value" : "None"
      }, {
        "name" : "json",
        "value" : "{'accounts': 'zxc', 'pwd': '123456', 'type': 'username'}"
      }, {
        "name" : "files",
        "value" : "None"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "json提取",
      "time" : {
        "start" : 1684058469416,
        "stop" : 1684058469417,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "res",
        "value" : "'{\"msg\":\"登录成功\",\"code\":0,\"data\":{\"id\":\"24992\",\"username\":\"zxc\",\"nickname\":\"\",\"mobile\":\"\",\"email\":\"\",\"avatar\":\"http:\\/\\/shop-xo.hctestedu.com\\/static\\/index\\/default\\/images\\/default-user-avatar.jpg\",\"alipay_openid\":\"\",\"weixin_openid\":\"\",\"weixin_unionid\":\"\",\"weixin_web_openid\":\"\",\"baidu_openid\":\"\",\"toutiao_openid\":\"\",\"qq_openid\":\"\",\"qq_unionid\":\"\",\"integral\":\"0\",\"locking_integral\":\"0\",\"referrer\":\"0\",\"add_time\":\"1683260782\",\"add_time_text\":\"2023-05-05 12:26:22\",\"mobile_security\":\"\",\"email_security\":\"\",\"user_name_view\":\"zxc\",\"is_mandatory_bind_mobile\":0,\"token\":\"af31f31ba437427b4072bd19365b2f5d\"}}'"
      }, {
        "name" : "json_path",
        "value" : "'$..token'"
      }, {
        "name" : "multiple",
        "value" : "False"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "json提取",
      "time" : {
        "start" : 1684058469417,
        "stop" : 1684058469417,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "res",
        "value" : "'{\"msg\":\"登录成功\",\"code\":0,\"data\":{\"id\":\"24992\",\"username\":\"zxc\",\"nickname\":\"\",\"mobile\":\"\",\"email\":\"\",\"avatar\":\"http:\\/\\/shop-xo.hctestedu.com\\/static\\/index\\/default\\/images\\/default-user-avatar.jpg\",\"alipay_openid\":\"\",\"weixin_openid\":\"\",\"weixin_unionid\":\"\",\"weixin_web_openid\":\"\",\"baidu_openid\":\"\",\"toutiao_openid\":\"\",\"qq_openid\":\"\",\"qq_unionid\":\"\",\"integral\":\"0\",\"locking_integral\":\"0\",\"referrer\":\"0\",\"add_time\":\"1683260782\",\"add_time_text\":\"2023-05-05 12:26:22\",\"mobile_security\":\"\",\"email_security\":\"\",\"user_name_view\":\"zxc\",\"is_mandatory_bind_mobile\":0,\"token\":\"af31f31ba437427b4072bd19365b2f5d\"}}'"
      }, {
        "name" : "json_path",
        "value" : "'$..id'"
      }, {
        "name" : "multiple",
        "value" : "False"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "json提取",
      "time" : {
        "start" : 1684058469417,
        "stop" : 1684058469417,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "res",
        "value" : "'{\"msg\":\"登录成功\",\"code\":0,\"data\":{\"id\":\"24992\",\"username\":\"zxc\",\"nickname\":\"\",\"mobile\":\"\",\"email\":\"\",\"avatar\":\"http:\\/\\/shop-xo.hctestedu.com\\/static\\/index\\/default\\/images\\/default-user-avatar.jpg\",\"alipay_openid\":\"\",\"weixin_openid\":\"\",\"weixin_unionid\":\"\",\"weixin_web_openid\":\"\",\"baidu_openid\":\"\",\"toutiao_openid\":\"\",\"qq_openid\":\"\",\"qq_unionid\":\"\",\"integral\":\"0\",\"locking_integral\":\"0\",\"referrer\":\"0\",\"add_time\":\"1683260782\",\"add_time_text\":\"2023-05-05 12:26:22\",\"mobile_security\":\"\",\"email_security\":\"\",\"user_name_view\":\"zxc\",\"is_mandatory_bind_mobile\":0,\"token\":\"af31f31ba437427b4072bd19365b2f5d\"}}'"
      }, {
        "name" : "json_path",
        "value" : "'$..msg'"
      }, {
        "name" : "multiple",
        "value" : "False"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "json提取",
      "time" : {
        "start" : 1684058469418,
        "stop" : 1684058469418,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "res",
        "value" : "'{\"msg\":\"登录成功\",\"code\":0,\"data\":{\"id\":\"24992\",\"username\":\"zxc\",\"nickname\":\"\",\"mobile\":\"\",\"email\":\"\",\"avatar\":\"http:\\/\\/shop-xo.hctestedu.com\\/static\\/index\\/default\\/images\\/default-user-avatar.jpg\",\"alipay_openid\":\"\",\"weixin_openid\":\"\",\"weixin_unionid\":\"\",\"weixin_web_openid\":\"\",\"baidu_openid\":\"\",\"toutiao_openid\":\"\",\"qq_openid\":\"\",\"qq_unionid\":\"\",\"integral\":\"0\",\"locking_integral\":\"0\",\"referrer\":\"0\",\"add_time\":\"1683260782\",\"add_time_text\":\"2023-05-05 12:26:22\",\"mobile_security\":\"\",\"email_security\":\"\",\"user_name_view\":\"zxc\",\"is_mandatory_bind_mobile\":0,\"token\":\"af31f31ba437427b4072bd19365b2f5d\"}}'"
      }, {
        "name" : "json_path",
        "value" : "'$.data.username'"
      }, {
        "name" : "multiple",
        "value" : "True"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "58cdc691923753f4",
      "name" : "log",
      "source" : "58cdc691923753f4.txt",
      "type" : "text/plain",
      "size" : 2877
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 5,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "F01S01_登陆"
  }, {
    "name" : "feature",
    "value" : "F01_华测电商"
  }, {
    "name" : "severity",
    "value" : "级别"
  }, {
    "name" : "parentSuite",
    "value" : "utils.test_case_utils"
  }, {
    "name" : "suite",
    "value" : "test_single"
  }, {
    "name" : "host",
    "value" : "一只踩坑少年"
  }, {
    "name" : "thread",
    "value" : "21748-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "utils.test_case_utils.test_single"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'编号': 1, 'id': 'login.ok', '地址': 'http://shop-xo.hctestedu.com/index.php?s=', '路径': 'api/user/login', '请求方法': 'post', '公共参数(PARAMS)': '{\"application\": \"app\",\\n\"application_client_type\": \"weixin\"}', '请求头': 'None', '参数': '{\"accounts\":\"zxc\",\"pwd\":\"123456\",\"type\": \"username\"}', '参数类型': 'json', '文件': None, '校验字段': '$..msg;$.data.username', '校验类型': 'eq;eq', '预期结果': '登录成功;[\"zxc111\"]', '检查结果': None, '用例名': '成功调用登陆接口，msg返回登录成功', 'JSON提取_引用名称': 'VAR_TOKEN;VAR_UID', 'JSON表达式': '$..token;$..id', '正则提取_引用名称': None, '正则表达式': None, 'story(小模块)': 'F01S01_登陆', 'feature(大模块)': 'F01_华测电商', '备注': '正常用例登陆', '级别': 'blocker', '数据库SQL': None, '数据库变量': None, '数据库预期': None}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "67b601218c5572e9.json",
  "parameterValues" : [ "{'编号': 1, 'id': 'login.ok', '地址': 'http://shop-xo.hctestedu.com/index.php?s=', '路径': 'api/user/login', '请求方法': 'post', '公共参数(PARAMS)': '{\"application\": \"app\",\\n\"application_client_type\": \"weixin\"}', '请求头': 'None', '参数': '{\"accounts\":\"zxc\",\"pwd\":\"123456\",\"type\": \"username\"}', '参数类型': 'json', '文件': None, '校验字段': '$..msg;$.data.username', '校验类型': 'eq;eq', '预期结果': '登录成功;[\"zxc111\"]', '检查结果': None, '用例名': '成功调用登陆接口，msg返回登录成功', 'JSON提取_引用名称': 'VAR_TOKEN;VAR_UID', 'JSON表达式': '$..token;$..id', '正则提取_引用名称': None, '正则表达式': None, 'story(小模块)': 'F01S01_登陆', 'feature(大模块)': 'F01_华测电商', '备注': '正常用例登陆', '级别': 'blocker', '数据库SQL': None, '数据库变量': None, '数据库预期': None}" ]
}